Steps are followed for Machine Learning Model Building :- 

Steps_No.1
     ## Import required packages.
          from sklearn import linear_model
          from sklearn.metrics import mean_squared_error
          import pandas as pd
          import numpy as np 
          from sklearn.model_selection import train_test_split

Steps_No.2
     ## Load the dataset.
          # Load the diabetes dataset
          diabetes = pd.read_csv("diabetes.csv")
          diabetes.head()

Steps_No.3
     ## Split data into Feature and Lable.
          diabetes_X = diabetes[["BloodPressure", "Age"]]  # Select specific columns using iloc is diabetes.iloc[:,[2, 7]]
          diabetes_y = diabetes["Glucose"]                # Select glucose column using iloc is diabetes.iloc[:, 1]
          print(diabetes_X.shape, diabetes_y.shape)

Steps_No.4
     ## Split into train and test data with test_size.
          X_train, X_test, y_train, y_test = train_test_split(diabetes_X, diabetes_y, test_size=0.2)

Steps_No.5
     ## Check the shape.
          X_train.shape, X_test.shape, y_train.shape, y_test.shape

Steps_No.6
     ## There are a few ways to find the best fit line. One of the approaches is the Ordinary Least Squares (OLS) method which 
     is an intutive mathematical method. 
     **Note:** Refer the following [link](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html) 
     for Linear Regression from sklearn...

     # Create a linear regression object
          regr = linear_model.LinearRegression()
     # Train the model using the training sets
          regr.fit(X_train, y_train)
     # Make predictions using the testing set
          diabetes_y_pred = regr.predict(X_test)

Steps_No.7
     # For retrieving the slope use 'regr.coef_'. As we have taken two variables, we will get two coefficients m1 and m2
          print('Coefficients: ', regr.coef_)
     # To retrieve the intercept
          print('Intercept: ', regr.intercept_)
     # Calculate the root mean squared error
          print("Root mean squared error: %.2f" % np.sqrt(mean_squared_error(y_test, diabetes_y_pred)))

Steps_No.8
     ## Find the Test Score
          print(regr.score(X_test, y_test))

Steps_No.9